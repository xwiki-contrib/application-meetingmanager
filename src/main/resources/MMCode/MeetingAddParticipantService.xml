<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
  <web>MMCode</web>
  <name>MeetingAddParticipantService</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent/>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1288566000000</creationDate>
  <date>1288566000000</date>
  <contentUpdateDate>1288566000000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <template/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.0</syntaxId>
  <hidden>false</hidden>
  <content>{{groovy}}
// Add participants to a meeting  
// Optionally send a mail from template including an additional note

import com.xpn.xwiki.plugin.mailsender.Mail;
import java.util.ArrayList;

def success = true;
def error = "";
def participants;
def meeting = request.meeting;
def nbUsers = 0;
def nbMails = 0;
def mailSent = false;
def meetingDoc;
def toAddr = "";

  meetingDoc = xwiki.getDocument(request.meeting)
  meeting = meetingDoc.getObject("MMCode.MeetingClass")

 if (request.emails &amp;&amp; request.emails!="") {
  toAddr = request.emails
  def extra = request.mailnote;
  def fromAddr = xwiki.getXWikiPreference("admin_email")
  def ccAddr = null
  def bccAddr = null

  templateDoc = xwiki.getDocument(request.template)
  templateObj = templateDoc.getObject("XWiki.Mail", "language", (xcontext.language==null) ? "" : xcontext.language);
  if (templateObj == null)
   templateObj = templateDoc.getObject("XWiki.Mail")
  templateDoc.use(templateObj) 

  // Prepare mail template context
  vcontext = xcontext.get("vcontext")
  vcontext.put("meetingTitle", meetingDoc.title)
  vcontext.put("meetingURL", meetingDoc.getExternalURL())
    
  textContent = xwiki.parseContent(templateDoc.getValue("text"))
  htmlContent = xwiki.parseContent(templateDoc.getValue("html"))
  subject = xwiki.parseContent(templateDoc.getValue("subject"))

  // decorate text/HTML content with extra note.
  if (!extra.equals("")) {
    def args = new ArrayList();
    args.add(xwiki.getUserName(meetingDoc.creator, false))
    intro = msg.get("meetings.mail.personalnote", args)
    textContent += ("\n\n" + intro + "\n\"" + extra + "\"")
    htmlContent += ("&lt;br /&gt;&lt;br /&gt;" + intro + "&lt;br /&gt;\"" +extra + "\"&lt;br /&gt;")
  }

  // TODO: ultimately the code below should be merged in the mailsender plugin
  vcontext.put("from.name", fromAddr);
  vcontext.put("from.address", fromAddr);
  vcontext.put("to.address", toAddr);
  vcontext.put("to.cc", ccAddr);
  vcontext.put("to.bcc", bccAddr);
  vcontext.put("bounce", fromAddr);

  Mail mail = new Mail();
  mail.setFrom((String) vcontext.get("from.address"));
  mail.setTo((String) vcontext.get("to.address"));
  mail.setCc((String) vcontext.get("to.cc"));
  mail.setBcc((String) vcontext.get("to.bcc"));
  mail.setSubject(subject);
  mail.setTextPart(textContent);
  mail.setHtmlPart(htmlContent);
  
  try {
    xwiki.getPlugin("mailsender").getProtectedPlugin().sendMail(mail, xcontext.context);
    mailSent = true;
  } 
  catch (Exception e) {
    success = false;
    error = e.message
  }
 }

 // the mail was sent with success or was not needed
 // we should now add the participants to the meeting
 // and send back the HTML to represent the current participants
 if (success) {
   participants = request.participants.split(",")
   if (participants) {
    for (participant in participants) {
      def obj = meetingDoc.newObject("MMCode.MeetingParticipantClass")
      obj.set("username", participant)
      obj.set("participation", "undecided")
      nbUsers++;
    }
   }
   meetingDoc.save();
   println "SUCCESS ${meeting} ${nbUsers} ${mailSent} ${nbMails} ${toAddr}";
 } else {
   println "ERROR ${meeting} ${nbUsers} ${mailSent} ${nbMails} ${toAddr}:" + error;
 }
{{/groovy}}</content>
</xwikidoc>
