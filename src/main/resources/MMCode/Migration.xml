<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
  <web>MMCode</web>
  <name>Migration</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent/>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1288566000000</creationDate>
  <date>1288566000000</date>
  <contentUpdateDate>1288566000000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <template/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.0</syntaxId>
  <hidden>false</hidden>
  <content>= Migration of Meeting Manager =

{{groovy}}
println "[[Confirm launching migration&gt;&gt;${doc.fullName}?confirm=1]]"

for(item in xwiki.searchDocuments("where doc.fullName like 'XWiki.Meeting%'")) {
 def itemdoc = xwiki.getDocument(item)
 println "* Moving page ${item} to space MMCode"
 if (request.confirm=="1")
  itemdoc.rename("MMCode.${itemdoc.name}")
}

for(item in xwiki.searchDocuments("where (doc.fullName like 'XWiki.Meeting%' or doc.space = 'MMCode' or doc.content like '%XWiki.Meeting%') and doc.name&lt;&gt;'Install' and doc.name&lt;&gt;'Migration'")) {
 def changed = false
 def itemdoc = xwiki.getDocument(item)
 def content = itemdoc.getContent()
 def newcontent = content.replaceAll("XWiki.Meeting", "MMCode.Meeting").replaceAll("MMCode.MeetingManager ", "XWiki.MeetingManager ").replaceAll("MMCode.MeetingManager\\.", "XWiki.MeetingManager.") 
 if (content!=newcontent) {
   changed = true
   if (request.confirm=="1") 
    itemdoc.setContent(newcontent)
 }
 
 // Modifying JS Extension code
 itemdoc.use("XWiki.JavaScriptExtension")
 def code = itemdoc.getValue("code")
 if (code) {
  def newcode = code.replaceAll("XWiki.Meeting", "MMCode.Meeting").replaceAll("MMCode.MeetingManager ", "XWiki.MeetingManager ").replaceAll("MMCode.MeetingManager\\.", "XWiki.MeetingManager.")  
  if (code!=newcode) {
    changed = true
    if (request.confirm=="1") 
     itemdoc.set("code", newcode)
  }
 }
 
 if (changed) {
   println "* Updating code in page ${item}"
   if (request.confirm=="1") 
     itemdoc.save("Migrated Meeting Manager code")
 }
}

def boolean migrateDoc(document, confirm) {
 def result = false
 result |= migrateClass(document, "XWiki.MeetingClass", "MMCode.MeetingClass", confirm)
 result |= migrateClass(document, "XWiki.MeetingCycleClass", "MMCode.MeetingCycleClass", confirm)
 result |= migrateClass(document, "XWiki.MeetingCycleItemClass", "MMCode.MeetingCycleItemClass", confirm)
 result |= migrateClass(document, "XWiki.MeetingParticipantClass", "MMCode.MeetingParticipantClass", confirm)
 result |= migrateClass(document, "XWiki.MeetingDateAttemptClass", "MMCode.MeetingDateAttemptClass", confirm)
 return result
}

def boolean migrateClass(document, sourceclass, targetclass, confirm) {
  def result = false
  for(obj in document.getObjects(sourceclass)) {
   result = true
   if (obj!=null) {
    if (confirm) {
     def newobj = new com.xpn.xwiki.objects.BaseObject();
     newobj.merge(obj);
     newobj.setClassName(targetclass);
     document.addObject(targetclass, newobj);
     document.removeObject(obj);
    }
   }
  }
  return result
}

for(item in xwiki.searchDocuments(", BaseObject as obj where doc.fullName=obj.name and obj.className like 'XWiki.Meeting%Class'")) {
 println "* Migrating classes in page ${item}"
 if (request.confirm=="1") {
    def itemdoc = xwiki.getDocument(item)
    def itemdocument = itemdoc.getDocument()
    if (migrateDoc(itemdocument, request.confirm=="1")) {
        xwiki.getXWiki().saveDocument(itemdocument, "Migrated Meeting Manager code", xcontext.getContext())
    }
 }
}
{{/groovy}}
</content>
</xwikidoc>
