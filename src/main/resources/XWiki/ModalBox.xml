<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
  <web>XWiki</web>
  <name>ModalBox</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent/>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1240413372000</creationDate>
  <date>1255883026000</date>
  <contentUpdateDate>1255883026000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <template/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/1.0</syntaxId>
  <hidden>false</hidden>
  <attachment>
    <filename>spinner.gif</filename>
    <filesize>7823</filesize>
    <author>XWiki.JeromeVelociter</author>
    <date>1240414586000</date>
    <version>1.1</version>
    <comment/>
    <content>R0lGODlhMgAyAPf/APr6+icnJ/b29sXFxWpqasnKyqGhov7+/js7PPT09Kmpqp2dneTk5IGBguLi4tDQ0d7e3+jo6ebm5rW1tvLy8uzs7Orq6szMzdra2qWlpbGxsVJSUtzc3ENDQ87Oz+Dg4YWFha2trV1dXWFhYX19fpWWltTU1dbW14mJidLS03FxcRwcHI2NjkxMTNjY2ZqZmszMzLy8vQQEBJGSkr6+vsLCwnl5ebq6u3V2dsDAwLi4uGZmZllZWs/O0DQ0NLy9vtDR0hISErq8vLu6vLi5ur6+wLy7vMPDw9XV1uPj46Cgoaamp5+foKKio7+/wJ6en7m6uq6ursTDxb/AwYCAgcvLy6SjpNXW19HR0qyrrcfHx72+vrOzs8zLzMTExLm5ulxcXNrZ28/P0I+PkH9/f8HCw19fX2NiZJycnIeHh1pbW4B/gEhHSVtbW1paWz49Ph8eH/39/e7u7vz8/Pj4+Pn5+fDw8e/v7/Dw8OHh4vHx8d/f393d3eXl5dPT1PHx8u3t7dnZ2uvr69fX2Nvb2/Pz8+np6fz8/fv7++7u76urq+/v8MHBwfX19efn5/f396SkpF9gX4KDg4SEhdfY2EhISNvc3HNzcz8/QHd3d/n5+sLBwm5ubvTz9Kysrc/Q0Jubm4yLjDk5OcjHyPn4+Tg3OGdnZx8gH7e3t7i3uOfo6OHi4uLh4mBfYOTj5Nna2pybnNbV1oyMjEZHR9zb3IiIiL29vmNjY2RkZKenqB4eH3h3ePHw8CAfH/X29nx8fN3e3urp6s3NzkFBQd/g4GhoaXBwcPv8/PHw8a+vryEhIZSUlLCwsfHy8vP09JCQkHh4ePTz84SEhJ+gn6Ojo+Xm5qioqN3e3be4uOnq6oOEgw4ODWBgYMvMzKysrLO0s7S0tNPU1N/g39PU09TT1NTT04qKimBgYUdIR9fY18jIyDc3N4iIib29vYmIiFdXV3t7ey0tLXR0dI6Oj5eXl+Df4D9AP2hnaBgYGNjX2Pj4+Xh3d7q6ubu7u8zLy////yH/C05FVFNDQVBFMi4wAwEAAAAh+QQFCgD/ACwAAAAAMgAyAAAI/wD/CRxIsKDBgwgTKlzIsKHDhxAjSpxIsaLFixgzatzIsaNHhIUmcQr08aGGbTI4FTxQ8p+LYpx4DcwQRAYughEILSo5o9eKeQMV1Cw2sJAHYRzifLwRb0U8DAIVDRV4IJAwYX1YfjR2agUBpVJlEP0n6OiJOi2RrNMVwMi/sCrnIBHmwQJHPkwYERyjbMW7BN5qyiN7QRgGpQIbSfhTcQ4JUR1IDBJIgc2pXt6q1CwhINAFMYUEApDgRxgSOhQPgHiDAEELehT+gVOmSxKAEtAoUHggLM+/AxVOXBV2tiKFJhtYi+IxoRFuQgTjSPiAKAGHo8LE7HmEcY+7DZgQlP96obCQmKseMNjhOCDTMExUFAK6isQCYo4HaDBxoHBOhAgAZPRINzV44cURRwwAVUN0JCLHg3IAIkeAEYVwywjncKMhN7fowFACWIgh4ohiQBcRE2aYwY0Z54zgoiJaJWTHcDQKY4JEjljTBCSQZLBEBqhwxxAgeThgpAN55BFbRhaYgJpCFIT2ER4T1EJGOwrp8YB2CXAUhzrL/EKGJOAoJMdwKTBAoUVx8LEAGWtIggIqjTBACFoDHfCHHP6lMJwJFcQo0QE5kEFGA2nk4pshCzCBxD93CBIHHkdF8E8dH/B2FQRzUBQHE1RIAoownR4AzgLUBJLAD0JEQEFhKeCiaQcGR2EhQEWDhMCIHgMFggYTXDzSBxExkERLYR8MFIcgfERw30SIEAQYE0uQxMAN/UCVAG9i8KpsR1U8YUAMnTLQTwwLOlDYYSUZYo0SuUggUB/nLgiAn8IIUpIwTzQxwED0xhDGQIIURoigGyXBzARL/hMwSQK1aYKlJVHQCEF93GAEJQTNIQDCLf3ziDDqABLyySinrPLKLLfs8sswwxwQACH5BAkKAP8ALAkACQAaACAAAAj/AP8JHEiQYIJn8PgUXMiQYL9eK34VnNPwH59fkigMTBZgxSWCLFpoaGjgjSg0A8F1zDTwyDYZGxox9MIGAToIArkE0MXy35xZMmT8itNQkkkyAlWu6LngZbwPFQlteNPByz9w8Zb+i+AjaAmCSZJ1IcjEHgICjbB6/Afv5TA6A+MsazNihsJ/CUa8QTDhwU4WGHrJ2FalIKhWIsAQsJbgH41hCGYgalLrjoaXxhYm4MLpnAg38hg9ymAO6kA9JG41gruwzxNO3MDwUFDxnwAsFR+MucXta8U7tQUWYOYoOME6Jzw8eCBGzIM8xgs6kSSpgXUqVBoMiJ7SunXq1GNw0xdYIQYqHei/fNFSZ/xvCADcF0ygJcMCYfIHIgmBhgk1LfId0McETzDRRC4F0CFIH4hwJwYTTyiRQTuG/HMHEV9A14kdB/whRkOoKNEEOBgQ9U8BRNjCwCMPCANIAh40lEcNWDQmEAPYxFCAJoAIIwxUEODHEEUDPXIEFDkw8E8FHggDXSMpRBfIDTE8QBQgTTpwo5AVLZJDP4wAIhAgPQij5T+ImBAcIVDEcMJAFYhhJpxcMiSIFlXIRJ6c0A2EU20CsDZmk6YJdIh8dRBywh8NBQQAIfkECQoA/wAsAAAAADIAMgAACP8A/wkcSLCgwYMIEypcyLChw4cQI0qcSLGixYsYM2rcyLGjR4QUljXA8DHhnII1MCEwV/BRyX8QUIRCNrDfLAQgBsYxt8FbSQ2twOQaSOMmu4E1lK0w0+ijCQIiduwRSIMNgqP/6mzotWLMSyUjRMw7SQPdVYFMlLJx9NIRjkhntPxzUulsnw5welnjyACVhzgDv9wSQSJBjbrS/klSCqbOwByXolSMo4CMJGofBNaRNAIMjVctRDHB4AOOMg8Ck+zrJSPeoIoTJkmiAoKLnn9YTJnJFYeflUc0lP7616hEPBnISzGoCABGCWkNyMga8MiJAgsEBbwgIacochlBOOX/wSjnywxpVH7pUNguyPcWAzg60JBGWjKFuZC3cHLgIwQYtyVEgQbCAJBRHXwM4sIgDA6yXEN16CFHBYJUYKFjEcFggBJKMMHEE08wgQVDCTwgjDAepJhiIBJVYYUVkEACY4xY9KfQH2KcWNAJEiVgwgMpBJmCH3wAxhAefSSpZB8JaIRHEgYmdMAddpSUQApb3EBSQniI4QEhFHB0DB+MfBGDE4QodMeJwmCRBx0YxWGIFlAYYYsXEMyRiAWIEDSlIHMIgoSOKRhyEkUHEFLnD2UgUcg/FFwgjAT/6AFIHHp4MOk/ACSRwkAc9DnRAcL8QIMYhgh0wCCSWvCIiYI0k5IjFnD+UwgfGQHiApQDWXDiCYjIoWlmH5wIwUBTfiCIjYgSVMegYgjyjxw5jidACsKIgYefHSVxIiH9USuMAwJJcGIgh3pUCLZiPDptjuT+M8egwhjCLEd9nJiZQOLG+w8g3967EQUuYIDhv9Uim8cJ2JUEgKj8ajqeTrW+VBAACYZp8cYcd+zxxyCHLPLIJI8cEAAh+QQJCgD/ACwAAAAAMgAyAAAI/wD/CRxIsKDBgwgTKlzIsKHDhxAjSpxIsaLFixgzatzIsaNHhI80KJHw8eGnESKUFIxT8p8hBSEeDdRyT8QLgtZwbCp5RBIZGgMLFAODZmCKDgjkyfSIAQWVNIYEChVR9F8cFW9E0WP5UYNPRQf+Ta0KDmkbkiUNPWswadC/KgSI/pODCxMCRRzliPlA8AgIMrDowCAggt4/UEgJLP2XYlmNigdyMGlCQ5BAOqAkkfCwJ66iJBveYPIgUNAYBKeG8aF4YAA1A0yWVKHz70QaKhPm0FCQYMAwUdL+zQnR4pSuFR0YVKxDTlETJQuyBAIwAJwFggnQSAKUYkeAXisCcP/CgBGPOudMYFVRWCWeMl29NvTjyMBJhiY5FCY7tcIeGgEeHZBHCnoopMcyJUSQ0RyGMNDHgw4m4tAeyShioQIYogURH7b080MMMQjRzxD1MKSOLkGkqGIQLUg0SDsgxhjDD5aEpRA4MuSoY47xSNQILYFgQAgGRK4yR0PtUGGDCgQUU8wO82X0iBxHKvTIYh3VsQoQwvRhoBhYJIElRgcYgoQwaO6hkBxoXpACAwCQ2UwgaAojRh6IUABIlQId8AeVEaRQpwkV2DjRAY54gKYHGFDwTyNiCOPIPwnY4WekCtbxwQN1QsBnRAdggOYJFoR1ACFoGkKHoIAkoGgKdQiTZAcGimIBIEV38NFHrAIBgiYSACSiKF8QoMmXQHEIwkcEXFHU7D8AnCCMB9fpJUwejwoqRoEDPZtRH2gGwpK1DgjEAJoYeLtRAn7YyS25AiFiApqWfSRBmgPBK1AFaBJiKEd2IDHIYoBEii2yEJigYEl08NrrsAQdIsC/LQlUByEn/FHxxhx37PHHIIcs8sgkkxwQACH5BAUKAP8ALAAAAAAyADIAAAj/AP8JHEiwoMGDCBMqXMiwocOHECNKnEixosWLGDNq3Mixo0eEALRwMfTxYR5zVKIUjFPyH4UjThoNxMCCigKCNOYNKEnIipICA/nUVDTQAQERkmR6NJSlSRMLAvnMa0BU4LIRYBaw/AgD0rQbLPmMoSpQHQEzKhi0pMDFKaF/wMZQISogDVYNHBtBcHRgYKAlSpLR2SPX2r8vO0TYEDAQAqSdFSn1EyLmjsA5/aww8QPoGZUJgH5hhSGw0JI2mDYEqkiIRgwhOQaR+ucoVxNGB1LcaIQh8TyBNYoNe4Ngw56KcxwMoGHkBqM8cwJpqSCwb50JJQTtoTILEwJMNtJh/xSAQQqNfkRiKSS0YbgoXDE4yjHh5IcwhQMwidpggMJH7YUo9Ig1SvSRURx4AKIgIBUA4l9DffQzwTdccKGBBklIFMEDYnTYYQ9iSNCXQhggEE88AaAYQAAbSJSEMDDGCGMeIyZUgC4rrIDjjj5IRAcDeTggpAN5SIBIQ8ngkMmSS17yhUZ13HGkQkdA5hEiEvghjANUrhAED0d0BMggMXKgEAwypKnMJaxgdEAhHHgAowcQAJAAIFNWR4EeiNCgTJoyBFBCAhYJIsacLtjxDx1YCKNWI3jEkQAWF0Twjx6X4CPDNjJsIEhFfMCIhCFbQQBjHwCYIIwFAjwgzAOPCJx0RCWcbmOlRHrwwQAdA+EhZwp1/OEqBP84AKOZl1GzQQMBVlTjP4i4IIwHEvxjh6vHPaKlB5YNFCtHhsB4whzWYiuQBDC6QO5HjyAxrRwCXSvMcf/McQKMETy7kQXHDiQvvf/cke5WHRVywglK/YOHuQN9YEIf+m5UB6+9HkrsQHEIQHBLAyHChwl4cCzyyCSXbPLJKKes8sorBwQAIfkEBQoA/wAsCgAJAB8AHwAACP8A/wkcSHDgnCsD5BRcyLDhP0MKlBwpeMBhQQEmsNAZyCCiE4LClmCxOLAPDSMuBkpQZCDHQEOyGqB5RPIfHi8x2uERKCGLgY8CvUkjo6GmQEI0+gmr2FMJUCTmGjwzZPSfgAK2fvT5JyGE0390mgxl5JCOI4UcncQYAECVJyW2/hWo1aDERoEMJogZmEeYGA6FBMbxQOPGHgpeR+l5IYnECYGNUNkYYeyDwCTCMqdwAOCfHEYxUvyDUOVREnZrIAn0AAJXJBHGGAg8FCFFZmF+ssXpM0gPQQADFN3pQ6/YCBEjnkEoSCcPlswX8lh0cOmMGTBktDjUwyEzB4sPjhvXY5ag5nABFuugSkZ1oR3PcuLLCWzU0IAcNPK3i+FooZgH/ZG0xzstVFIJOrMkSEBVDGHxBgIQRojABgwypEMa7LCDAgq1gFBDhQUVUAWIJBXgQzwEFEBiQ/2ssIIypTSw1Yr/xJGDNXhM48MKuijzhgHogXhAH0HIAMI/fUATD4+njABIhRfgUUgAMuAzyEAi9LJCAP6AKN0LMsjAw0CIhLCDLOVVuBwgysiwTVED3UXjDGEOcweNCzUST5gsxIFnQcyE+YYzfxY0QgAkzFEoQQJgQdNCAQEAIfkECQoA/wAsCwAJAB4AIAAACP8A/wkcSFBgHFaDChVcyLDhnTIxwjWcKJDOHggABlY4EgMLQQxb+FAUaEGYMFcDAUmJkWKgHAUGJtQZSQGLMDEJBKo00lJgDSvTBhwY+c+BSUI6vRjx+O+Dgibe7hD998iEsB4V/slR6hHADWpKHlBMRNCQyStz5AwQIuYfpVwGmGUkOeBVQT45BbowGcHXgH6DGoGjxuSDwEda6E2aJ2EhA0T/7Jjc888RhjoWljDpJzDQNBCSqMyzwNCEoH+GPjQiOMfPlEKCkpmTRkWStT4ThSWhaGgGiAYkXviZShGDJBLzcgggThHAgClymE8F9ABGlQLY1WWVPrAPDgLFwpvaGg+C+0AXYNqkBwNGBBhO5gceeQEKFJr7L2DE/4dl+P6FWLSADhlM/SfQEesg8MYGy0Sw3xxaaECBAi0k+MY7UTwyFW4YaCCAMPEo88w/EaAwiygKZiIVRRc4OIsML5ygjC7xIPVPAca8IUoHPU2EBQCGKCNDG//ggM8pBAw0Byq7gLIcRbjtgY8Mt/yDgQ8rKPMFQTMRd0IQMpwhkDkrrLABHvEJA2aV/+DRwQq60BPfAGCKKRAX+OiyQV7StQPmOQQZI4o58X2xjQxqEPQIEnTEZ8EG8XBBXEAAIfkEBQoA/wAsAAAAADIAMgAACP8A/wkcSLCgwYMIEypcyLChw4cQI0qcSLGixYsYM2rcyLGjR4RxLCSh8/FhoQfC8pQ8WCeJA0QDF6GEQNBQLEElBQkT1megHZR7BibwYqsKTI96UD4QIPCnsKACr9AQ4udAyQ87IVh1SvOfoCNbjuhZKcCPMDF3/jkNOkdMkRgcOAIQ9Iego50u4nD9J4FRjAEABhbiYMhiEmEPPjD9N+eEMA+CBKDMU6cLjS+OBM7hgCpDskQV8+wUZsLRoX9ydn44YIiynSlGugiM4CQXNQPW5FRE1AflzkFyDkjgU0ig1c0eEjQqoAiSASVEHFm1KACCmNE9E+rhsqSJkiiB4mz/lBNoJyGFSSApyVWgkccDgvIkUAhAmBZAGQ8UwmOnvx09izEkgAMQ8GEgBxzMF5EFKTzg4IMpGDJdQoCgMcYzY8wzDwvz5CKRA/+MJuJqC31ARQMnoniiORI94sAeMMaYRB0NVaGAIjjiqIAfGgFAgXjoJVHSHIac4IGQCfEhjzHUgMjRHeWZp1AVapgxQiZR4JGRAHv4JgwHdTzixVgEuaBFAsnsAEYkt5CgBZAUAYLFaCcAcgAiuMhAxj8cFIDICRt04M0/fcwwggjc4PKCexMdwMdOfjgyh0DUyCADPBa8oYsC+byBwAYMCCSMJGaIsAMGFd2BwQeM/uPANjKsmxBIDgGsoMI/ZIiCSS0D0aEDCE0EONFpAyHSgqXw/HNDALpc8g8GbCAwSxUECTBhRhlY6gNOyzYr0AyivKGCsBwxEI8M2zQhULfO/gPIO7qGUBI9ls4SmLK1tvvPBKW8QQC5GrUTQAADDPRFrcYMNIcNLcww6UdIjEOQDsroQgBBJ7W60kCOgLGOBhuHLPLIJJds8skop6yyygEBACH5BAUKAP8ALAoACwAfAB4AAAj/AP8JHEiwoEFAe/AYXMjQoIAHwgLNaUhxIQRhwj5U3LhH4B0xwvw02kjykAuMEkiSNORBGBJEAx9JuKOSYBIASIRdACQwjgQYNLQUqikQAAWMGAQmwpLDVgxGFIgO7GPpEZ1AR5z22ym1YKMCU2z1G5DkQNeCgsTmcEHnrEFEhAZFdcuQjiFHEvL26fOILoUJITxlUURYEY2FFzpWdKSEyTQmSiIryVUQwr8IMDcOauekc2calhdaaEvRUDCSiLSICIKDIoMZY1JFoHhkg4zbLSgigUdF2jJGCQyeMLPttowNHE7oGEpwTwoBTkCQaDDpRTmzAg0EMe5DASIG8U6xzfiX58E/Ppx2DPlnwZokMg1AJOsb593tAO5o/iOArxeKCu+8McE1IphhjCECDYIGFVSk4YBAyVRSjHkCbXLKCj7woYU9b0zyzzJujPDEQABo8cQEpP3DnEAUbLCCMij8U0MHCKTxDzE7iLCDCQSluBATuqwwSwUy0hjjP9S4YUYoPjYEQQcveiLQjDUKhMclYIzQDklK4AOHGxMVWaVAjCgJQpMLHYHAG1UMxAiNHg40BgEZxEFSIC4QxAgmCJBBUCMu9HWWBcZsEINKAQEAIfkECQoA/wAsCQAOACAAGwAACP8A/wkcSLCgwYMIEypcyLAhHUGFGioUJmegoBPCTAiQiJCQQD0YPAgTlmIjx4Ic6NT58GCkBwwRTxoUkGLkhSuCFAJyUeXCwjsjU7gC0BBPkoVzqiUxWRDAgH5HqqTgIyGBRAB45MgBxBVQnWX4gogNgk+ZjyUMBVQZIMWL2yNHsHCSQbcuXW50FsrpJySGESMx/DIKZKzVmVu3RpjJdJShgwdYUkhOgcURQkNerCq8s0gihRdvVkhTKChKiCoVFWpogW+FrhEK9ywwYIUZlkcHTRBQ5voUrg+EGGkeKCGlB2pPDECasKegggArVvSaxWWOo0oI0PyT4GIOA1lpCvzFu2OriYEmGbzUGbjDNYJleAT+WofgBR4VZqQwINNgTOo84CihRAYWDDRBG5kgMVABCIiyQR4PRGIGKP8oQIIk3wyECBKoFKAJQcP9k0Axpdjzwj8XKLbAdiCsUQsEBK2nkCKiIGDGHf/AcIsIK/4zAQkNZPBhQw7wIIo9OggEAy48ClTIM2RIU4VE3pSCgDED6SiCdgJ5AKQBMi5UwDvv+DFQFUxSKFAcS4SSpEQQ8EFQFdyIUAJBj3wQpkz/yIGCMepIFBAAIfkEBQoA/wAsAAAAADIAMgAACP8A/wkcSLCgwYMIEypcyLChw4cQI0qcSLGixYsYM2rcyLGjR4RxIjCo8/GhHQ/CGJQ8SCdPkjgDAYkRloegoD1/SjoSJizCQDkzHQxMgJIDTI9AhaWgIzCpUIGEeDI48PEAH541/zkVCAglEqYlE2ARhiXnVkQneBriyOFFDYJJeBpNWlMCTxdzBj6ykKAiIjMyghCQIBCRH2Ee7hRC2YdOCsR6BM4xhETYCbAS47iRwTmANZiCpMZx5ADAHZ4QBN4JxFOYCcwS+9gIwlnGu6l9+DT6d4AqoiR8ADyCMBMxh90X1b2jHVidQrGtB8mhqjHDG87vFFbg6UcCIo+P6HH/eqAQEYPGGesMQHWj/Y0YgRwC+GOnvh08dr5HpBcvgP//8WTAUCMmPGDggQ/wIdElKzSoy4MPNnBUQni0ZqEwfkgUiA3GXOKhh7LI0ZAhfOxh4h4Q7IGHRo7AQJJChSDnER5MbICAEgoB4sUAx3XExTnriPIGCAoxQMQPThSQBwAZIZEJJqIgMIwkhnAgzIsDWSABAC78AEUMRVwgyEUKdBAlJsUMcIADI5hxwz8ROBBHH7nkoiAFHsRgxBZOBJLXRIgQgMAbbSjwiEC1uDHCFxWgIMkgfaBhgAaH/uOIOjcYUUMhFaGiwjNZ/aOOGyJkAggWZDSQygE6PAHJBQMBjgBBFYT8SZGM/+gBjRq46PCPGFQ08MU/EjRhgAIWEKTfRiGoIUIahwIrybD/ePEENTlM2JE4nICxgwcCfdJAA77+08kS00CyR0khuGHGMgM9MG65/5jwhAHZflSACtA89askDaASqw7WkFeSA44Q5EGq4BD0SAS2rhQTGjOEIfHFGGes8cYcd+zxxyCDHBAAIfkEBQoA/wAsCQALAB8AHgAACP8A/wkc+I8QgUuNCCpcyFBhLRkyzDWcSFFBEBkrVgkERLGjwDjvIBLY6NFjlRUygoj5d6ekwg/UBhC0AdHMPwoeXA7ktCIeNEICBcWDiOTRSp3/iulasUIUPVL/mEB8ccBCHqQR0gTotUJXCx0C4G14gFShmB0BmK5YVnZilA3KVphqO5GOlV9I6AqEwehIjb8D+OgVCKlSh8OIKzEbDALBGwSQHSOYMRiCLEkg0tSqlQYNr5IW9hAU3VCQCQAdGwkoWSgKJxEaKFLAgsXBI4o54PEAww0UxQoXhAkzIQHRQg4sIrURcesFoCSDUBPEAwhRkgfChQ1qORDVrTZgRmjPI6uqARV1/+QYOlDBSQ5H/wRwECPcQ544/+aAEGEGmg59AinxiyQF6JEBNXlUoEMMo9QhkByDCIfFav94YQ4kEgzkBzxrlKAHB09QU8U/FxCxhSUDzREBBn3gJ9BtAyWwDAkgoIcBEwaMCMgPRhyBB0FzUEQDCQ0Y4CAGSuQoEBI32OKHSxKwQEYagQhEiAFK/vMII/0UEUFJQzbgzUCEKNHEiAJ98EUMT3qExDMlGEImlgWk2EUNELgUQQUE3WjAKATVcYeLbekxQRRJlBQQADs=</content>
  </attachment>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>onDemand=On demand|always=Always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>XWiki.ModalBox</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>d0e2486f-6fa3-44fc-a685-461f0a5b2982</guid>
    <property>
      <cache>default</cache>
    </property>
    <property>
      <code>/*
ModalBox - The pop-up window thingie with AJAX, based on prototype and script.aculo.us.

Copyright Andrey Okonetchnikov (andrej.okonetschnikow@gmail.com), 2006-2007
All rights reserved.
 
VERSION 1.6.0
Last Modified: 12/13/2007
*/

if (!window.Modalbox)
	var Modalbox = new Object();

Modalbox.Methods = {
	overrideAlert: false, // Override standard browser alert message with ModalBox
	focusableElements: new Array,
	currFocused: 0,
	initialized: false,
	active: true,
	options: {
		title: "ModalBox Window", // Title of the ModalBox window
		overlayClose: true, // Close modal box by clicking on overlay
		width: 500, // Default width in px
		height: 90, // Default height in px
		overlayOpacity: .65, // Default overlay opacity
		overlayDuration: .25, // Default overlay fade in/out duration in seconds
		slideDownDuration: .5, // Default Modalbox appear slide down effect in seconds
		slideUpDuration: .5, // Default Modalbox hiding slide up effect in seconds
		resizeDuration: .25, // Default resize duration seconds
		inactiveFade: true, // Fades MB window on inactive state
		transitions: true, // Toggles transition effects. Transitions are enabled by default
		loadingString: "Please wait. Loading...", // Default loading string message
		closeString: "Close window", // Default title attribute for close window link
		closeValue: "&amp;times;", // Default string for close link in the header
		params: {},
		method: 'get', // Default Ajax request method
		autoFocusing: true, // Toggles auto-focusing for form elements. Disable for long text pages.
		aspnet: false // Should be use then using with ASP.NET costrols. Then true Modalbox window will be injected into the first form element.
	},
	_options: new Object,
	
	setOptions: function(options) {
		Object.extend(this.options, options || {});
	},
	
	_init: function(options) {
		// Setting up original options with default options
		Object.extend(this._options, this.options);
		this.setOptions(options);
		
		//Create the overlay
		this.MBoverlay = new Element("div", { id: "MB_overlay", opacity: "0" });
		
		//Create DOm for the window
		this.MBwindow = new Element("div", {id: "MB_window", style: "display: none"}).update(
			this.MBframe = new Element("div", {id: "MB_frame"}).update(
				this.MBheader = new Element("div", {id: "MB_header"}).update(
					this.MBcaption = new Element("div", {id: "MB_caption"})
				)
			)
		);
		this.MBclose = new Element("a", {id: "MB_close", title: this.options.closeString, href: "#"}).update("&lt;span&gt;" + this.options.closeValue + "&lt;/span&gt;");
		this.MBheader.insert({'bottom':this.MBclose});
		
		this.MBcontent = new Element("div", {id: "MB_content"}).update(
			this.MBloading = new Element("div", {id: "MB_loading"}).update(this.options.loadingString)
		);
		this.MBframe.insert({'bottom':this.MBcontent});
		
		// Inserting into DOM. If parameter set and form element have been found will inject into it. Otherwise will inject into body as topmost element.
		// Be sure to set padding and marging to null via CSS for both body and (in case of asp.net) form elements. 
		var injectToEl = this.options.aspnet ? $(document.body).down('form') : $(document.body);
		injectToEl.insert({'top':this.MBwindow});
		injectToEl.insert({'top':this.MBoverlay});
		
		// Initial scrolling position of the window. To be used for remove scrolling effect during ModalBox appearing
		this.initScrollX = window.pageXOffset || document.body.scrollLeft || document.documentElement.scrollLeft;
		this.initScrollY = window.pageYOffset || document.body.scrollTop || document.documentElement.scrollTop;
		
		//Adding event observers
		this.hideObserver = this._hide.bindAsEventListener(this);
		this.kbdObserver = this._kbdHandler.bindAsEventListener(this);
		this._initObservers();

		this.initialized = true; // Mark as initialized
	},
	
	show: function(content, options) {
		if(!this.initialized) this._init(options); // Check for is already initialized
		
		this.content = content;
		this.setOptions(options);
		
		if(this.options.title) // Updating title of the MB
			$(this.MBcaption).update(this.options.title);
		else { // If title isn't given, the header will not displayed
			$(this.MBheader).hide();
			$(this.MBcaption).hide();
		}
		
		if(this.MBwindow.style.display == "none") { // First modal box appearing
			this._appear();
			this.event("onShow"); // Passing onShow callback
		}
		else { // If MB already on the screen, update it
			this._update();
			this.event("onUpdate"); // Passing onUpdate callback
		} 
	},
	
	hide: function(options) { // External hide method to use from external HTML and JS
		if(this.initialized) {
			// Reading for options/callbacks except if event given as a pararmeter
			if(options &amp;&amp; typeof options.element != 'function') Object.extend(this.options, options); 
			// Passing beforeHide callback
			this.event("beforeHide");
			if(this.options.transitions)
				Effect.SlideUp(this.MBwindow, { duration: this.options.slideUpDuration, transition: Effect.Transitions.sinoidal, afterFinish: this._deinit.bind(this) } );
			else {
				$(this.MBwindow).hide();
				this._deinit();
			}
		} else throw("Modalbox is not initialized.");
	},
	
	_hide: function(event) { // Internal hide method to use with overlay and close link
		event.stop(); // Stop event propaganation for link elements
		/* Then clicked on overlay we'll check the option and in case of overlayClose == false we'll break hiding execution [Fix for #139] */
		if(event.element().id == 'MB_overlay' &amp;&amp; !this.options.overlayClose) return false;
		this.hide();
	},
	
	alert: function(message){
		var html = '&lt;div class="MB_alert"&gt;&lt;p&gt;' + message + '&lt;/p&gt;&lt;input type="button" onclick="Modalbox.hide()" value="OK" /&gt;&lt;/div&gt;';
		Modalbox.show(html, {title: 'Alert: ' + document.title, width: 300});
	},
		
	_appear: function() { // First appearing of MB
		if(Prototype.Browser.IE &amp;&amp; !navigator.appVersion.match(/\b7.0\b/)) { // Preparing IE 6 for showing modalbox
			window.scrollTo(0,0);
			this._prepareIE("100%", "hidden"); 
		}
		this._setWidth();
		this._setPosition();
		if(this.options.transitions) {
			$(this.MBoverlay).setStyle({opacity: 0});
			new Effect.Fade(this.MBoverlay, {
					from: 0, 
					to: this.options.overlayOpacity, 
					duration: this.options.overlayDuration, 
					afterFinish: function() {
						new Effect.SlideDown(this.MBwindow, {
							duration: this.options.slideDownDuration, 
							transition: Effect.Transitions.sinoidal, 
							afterFinish: function(){ 
								this._setPosition(); 
								this.loadContent();
							}.bind(this)
						});
					}.bind(this)
			});
		} else {
			$(this.MBoverlay).setStyle({opacity: this.options.overlayOpacity});
			$(this.MBwindow).show();
			this._setPosition(); 
			this.loadContent();
		}
		this._setWidthAndPosition = this._setWidthAndPosition.bindAsEventListener(this);
		Event.observe(window, "resize", this._setWidthAndPosition);
	},
	
	resize: function(byWidth, byHeight, options) { // Change size of MB without loading content
		var wHeight = $(this.MBwindow).getHeight();
		var wWidth = $(this.MBwindow).getWidth();
		var hHeight = $(this.MBheader).getHeight();
		var cHeight = $(this.MBcontent).getHeight();
		var newHeight = ((wHeight - hHeight + byHeight) &lt; cHeight) ? (cHeight + hHeight - wHeight) : byHeight;
		if(options) this.setOptions(options); // Passing callbacks
		if(this.options.transitions) {
			new Effect.ScaleBy(this.MBwindow, byWidth, newHeight, {
					duration: this.options.resizeDuration, 
				  	afterFinish: function() { 
						this.event("_afterResize"); // Passing internal callback
						this.event("afterResize"); // Passing callback
					}.bind(this)
				});
		} else {
			this.MBwindow.setStyle({width: wWidth + byWidth + "px", height: wHeight + newHeight + "px"});
			setTimeout(function() {
				this.event("_afterResize"); // Passing internal callback
				this.event("afterResize"); // Passing callback
			}.bind(this), 1);
			
		}
		
	},
	
	resizeToContent: function(options){
		
		// Resizes the modalbox window to the actual content height.
		// This might be useful to resize modalbox after some content modifications which were changed ccontent height.
		
		var byHeight = this.options.height - this.MBwindow.offsetHeight;
		if(byHeight != 0) {
			if(options) this.setOptions(options); // Passing callbacks
			Modalbox.resize(0, byHeight);
		}
	},
	
	resizeToInclude: function(element, options){
		
		// Resizes the modalbox window to the camulative height of element. Calculations are using CSS properties for margins and border.
		// This method might be useful to resize modalbox before including or updating content.
		
		var el = $(element);
		var elHeight = el.getHeight() + parseInt(el.getStyle('margin-top')) + parseInt(el.getStyle('margin-bottom')) + parseInt(el.getStyle('border-top-width')) + parseInt(el.getStyle('border-bottom-width'));
		if(elHeight &gt; 0) {
			if(options) this.setOptions(options); // Passing callbacks
			Modalbox.resize(0, elHeight);
		}
	},
	
	_update: function() { // Updating MB in case of wizards
		$(this.MBcontent).update("");
		this.MBcontent.appendChild(this.MBloading);
		$(this.MBloading).update(this.options.loadingString);
		this.currentDims = [this.MBwindow.offsetWidth, this.MBwindow.offsetHeight];
		Modalbox.resize((this.options.width - this.currentDims[0]), (this.options.height - this.currentDims[1]), {_afterResize: this._loadAfterResize.bind(this) });
	},
	
	loadContent: function () {
		if(this.event("beforeLoad") != false) { // If callback passed false, skip loading of the content
			if(typeof this.content == 'string') {
				var htmlRegExp = new RegExp(/&lt;\/?[^&gt;]+&gt;/gi);
				if(htmlRegExp.test(this.content)) { // Plain HTML given as a parameter
					this._insertContent(this.content.stripScripts());
					this._putContent(function(){
						this.content.extractScripts().map(function(script) { 
							return eval(script.replace("&lt;!--", "").replace("// --&gt;", ""));
						}.bind(window));
					}.bind(this));
				} else // URL given as a parameter. We'll request it via Ajax
					new Ajax.Request( this.content, { method: this.options.method.toLowerCase(), parameters: this.options.params, 
						onSuccess: function(transport) {
							var response = new String(transport.responseText);
							this._insertContent(transport.responseText.stripScripts());
							this._putContent(function(){
								response.extractScripts().map(function(script) { 
									return eval(script.replace("&lt;!--", "").replace("// --&gt;", ""));
								}.bind(window));
							});
						}.bind(this),
						onException: function(instance, exception){
							Modalbox.hide();
							throw('Modalbox Loading Error: ' + exception);
						}
					});
					
			} else if (typeof this.content == 'object') {// HTML Object is given
				this._insertContent(this.content);
				this._putContent();
			} else {
				Modalbox.hide();
				throw('Modalbox Parameters Error: Please specify correct URL or HTML element (plain HTML or object)');
			}
		}
	},
	
	_insertContent: function(content){
		$(this.MBcontent).hide().update("");
		if(typeof content == 'string') {
			setTimeout(function() { // Hack to disable content flickering in Firefox
				this.MBcontent.update(content);
			}.bind(this), 1);
		} else if (typeof content == 'object') { // HTML Object is given
			var _htmlObj = content.cloneNode(true); // If node already a part of DOM we'll clone it
			// If clonable element has ID attribute defined, modifying it to prevent duplicates
			if(content.id) content.id = "MB_" + content.id;
			/* Add prefix for IDs on all elements inside the DOM node */
			$(content).select('*[id]').each(function(el){ el.id = "MB_" + el.id; });
			this.MBcontent.appendChild(_htmlObj);
			this.MBcontent.down().show(); // Toggle visibility for hidden nodes
			if(Prototype.Browser.IE) // Toggling back visibility for hidden selects in IE
				$$("#MB_content select").invoke('setStyle', {'visibility': ''});
		}
	},
	
	_putContent: function(callback){
		// Prepare and resize modal box for content
		if(this.options.height == this._options.height) {
			setTimeout(function() { // MSIE sometimes doesn't display content correctly
				Modalbox.resize(0, $(this.MBcontent).getHeight() - $(this.MBwindow).getHeight() + $(this.MBheader).getHeight(), {
					afterResize: function(){
						this.MBcontent.show().makePositioned();
						this.focusableElements = this._findFocusableElements();
						this._setFocus(); // Setting focus on first 'focusable' element in content (input, select, textarea, link or button)
						setTimeout(function(){ // MSIE fix
							if(callback != undefined)
								callback(); // Executing internal JS from loaded content
							this.event("afterLoad"); // Passing callback
						}.bind(this),1);
					}.bind(this)
				});
			}.bind(this), 1);
		} else { // Height is defined. Creating a scrollable window
			this._setWidth();
			this.MBcontent.setStyle({overflow: 'auto', height: $(this.MBwindow).getHeight() - $(this.MBheader).getHeight() - 13 + 'px'});
			this.MBcontent.show();
			this.focusableElements = this._findFocusableElements();
			this._setFocus(); // Setting focus on first 'focusable' element in content (input, select, textarea, link or button)
			setTimeout(function(){ // MSIE fix
				if(callback != undefined)
					callback(); // Executing internal JS from loaded content
				this.event("afterLoad"); // Passing callback
			}.bind(this),1);
		}
	},
	
	activate: function(options){
		this.setOptions(options);
		this.active = true;
		$(this.MBclose).observe("click", this.hideObserver);
		if(this.options.overlayClose)
			$(this.MBoverlay).observe("click", this.hideObserver);
		$(this.MBclose).show();
		if(this.options.transitions &amp;&amp; this.options.inactiveFade)
			new Effect.Appear(this.MBwindow, {duration: this.options.slideUpDuration});
	},
	
	deactivate: function(options) {
		this.setOptions(options);
		this.active = false;
		$(this.MBclose).stopObserving("click", this.hideObserver);
		if(this.options.overlayClose)
			$(this.MBoverlay).stopObserving("click", this.hideObserver);
		$(this.MBclose).hide();
		if(this.options.transitions &amp;&amp; this.options.inactiveFade)
			new Effect.Fade(this.MBwindow, {duration: this.options.slideUpDuration, to: .75});
	},
	
	_initObservers: function(){
		$(this.MBclose).observe("click", this.hideObserver);
		if(this.options.overlayClose)
			$(this.MBoverlay).observe("click", this.hideObserver);
		if(Prototype.Browser.IE)
			Event.observe(document, "keydown", this.kbdObserver);
		else
			Event.observe(document, "keypress", this.kbdObserver);
	},
	
	_removeObservers: function(){
		$(this.MBclose).stopObserving("click", this.hideObserver);
		if(this.options.overlayClose)
			$(this.MBoverlay).stopObserving("click", this.hideObserver);
		if(Prototype.Browser.IE)
			Event.stopObserving(document, "keydown", this.kbdObserver);
		else
			Event.stopObserving(document, "keypress", this.kbdObserver);
	},
	
	_loadAfterResize: function() {
		this._setWidth();
		this._setPosition();
		this.loadContent();
	},
	
	_setFocus: function() { 
		/* Setting focus to the first 'focusable' element which is one with tabindex = 1 or the first in the form loaded. */
		if(this.focusableElements.length &gt; 0 &amp;&amp; this.options.autoFocusing == true) {
			var firstEl = this.focusableElements.find(function (el){
				return el.tabIndex == 1;
			}) || this.focusableElements.first();
			this.currFocused = this.focusableElements.toArray().indexOf(firstEl);
			firstEl.focus(); // Focus on first focusable element except close button
		} else if($(this.MBclose).visible())
			$(this.MBclose).focus(); // If no focusable elements exist focus on close button
	},
	
	_findFocusableElements: function(){ // Collect form elements or links from MB content
		this.MBcontent.select('input:not([type~=hidden]), select, textarea, button, a[href]').invoke('addClassName', 'MB_focusable');
		return this.MBcontent.select('.MB_focusable');
	},
	
	_kbdHandler: function(event) {
		var node = event.element();
		switch(event.keyCode) {
			case Event.KEY_TAB:
				event.stop();
				
				/* Switching currFocused to the element which was focused by mouse instead of TAB-key. Fix for #134 */ 
				if(node != this.focusableElements[this.currFocused])
					this.currFocused = this.focusableElements.toArray().indexOf(node);
				
				if(!event.shiftKey) { //Focusing in direct order
					if(this.currFocused == this.focusableElements.length - 1) {
						this.focusableElements.first().focus();
						this.currFocused = 0;
					} else {
						this.currFocused++;
						this.focusableElements[this.currFocused].focus();
					}
				} else { // Shift key is pressed. Focusing in reverse order
					if(this.currFocused == 0) {
						this.focusableElements.last().focus();
						this.currFocused = this.focusableElements.length - 1;
					} else {
						this.currFocused--;
						this.focusableElements[this.currFocused].focus();
					}
				}
				break;			
			case Event.KEY_ESC:
				if(this.active) this._hide(event);
				break;
			case 32:
				this._preventScroll(event);
				break;
			case 0: // For Gecko browsers compatibility
				if(event.which == 32) this._preventScroll(event);
				break;
			case Event.KEY_UP:
			case Event.KEY_DOWN:
			case Event.KEY_PAGEDOWN:
			case Event.KEY_PAGEUP:
			case Event.KEY_HOME:
			case Event.KEY_END:
				// Safari operates in slightly different way. This realization is still buggy in Safari.
				if(Prototype.Browser.WebKit &amp;&amp; !["textarea", "select"].include(node.tagName.toLowerCase()))
					event.stop();
				else if( (node.tagName.toLowerCase() == "input" &amp;&amp; ["submit", "button"].include(node.type)) || (node.tagName.toLowerCase() == "a") )
					event.stop();
				break;
		}
	},
	
	_preventScroll: function(event) { // Disabling scrolling by "space" key
		if(!["input", "textarea", "select", "button"].include(event.element().tagName.toLowerCase())) 
			event.stop();
	},
	
	_deinit: function()
	{	
		this._removeObservers();
		Event.stopObserving(window, "resize", this._setWidthAndPosition );
		if(this.options.transitions) {
			Effect.toggle(this.MBoverlay, 'appear', {duration: this.options.overlayDuration, afterFinish: this._removeElements.bind(this) });
		} else {
			this.MBoverlay.hide();
			this._removeElements();
		}
		$(this.MBcontent).setStyle({overflow: '', height: ''});
	},
	
	_removeElements: function () {
		$(this.MBoverlay).remove();
		$(this.MBwindow).remove();
		if(Prototype.Browser.IE &amp;&amp; !navigator.appVersion.match(/\b7.0\b/)) {
			this._prepareIE("", ""); // If set to auto MSIE will show horizontal scrolling
			window.scrollTo(this.initScrollX, this.initScrollY);
		}
		
		/* Replacing prefixes 'MB_' in IDs for the original content */
		if(typeof this.content == 'object') {
			if(this.content.id &amp;&amp; this.content.id.match(/MB_/)) {
				this.content.id = this.content.id.replace(/MB_/, "");
			}
			this.content.select('*[id]').each(function(el){ el.id = el.id.replace(/MB_/, ""); });
		}
		/* Initialized will be set to false */
		this.initialized = false;
		this.event("afterHide"); // Passing afterHide callback
		this.setOptions(this._options); //Settings options object into intial state
	},
	
	_setWidth: function () { //Set size
		$(this.MBwindow).setStyle({width: this.options.width + "px", height: this.options.height + "px"});
	},
	
	_setPosition: function () {
		$(this.MBwindow).setStyle({left: Math.round((Element.getWidth(document.body) - Element.getWidth(this.MBwindow)) / 2 ) + "px"});
	},
	
	_setWidthAndPosition: function () {
		$(this.MBwindow).setStyle({width: this.options.width + "px"});
		this._setPosition();
	},
	
	_getScrollTop: function () { //From: http://www.quirksmode.org/js/doctypes.html
		var theTop;
		if (document.documentElement &amp;&amp; document.documentElement.scrollTop)
			theTop = document.documentElement.scrollTop;
		else if (document.body)
			theTop = document.body.scrollTop;
		return theTop;
	},
	_prepareIE: function(height, overflow){
		$$('html, body').invoke('setStyle', {width: height, height: height, overflow: overflow}); // IE requires width and height set to 100% and overflow hidden
		$$("select").invoke('setStyle', {'visibility': overflow}); // Toggle visibility for all selects in the common document
	},
	event: function(eventName) {
		if(this.options[eventName]) {
			var returnValue = this.options[eventName](); // Executing callback
			this.options[eventName] = null; // Removing callback after execution
			if(returnValue != undefined) 
				return returnValue;
			else 
				return true;
		}
		return true;
	}
};

Object.extend(Modalbox, Modalbox.Methods);

if(Modalbox.overrideAlert) window.alert = Modalbox.alert;

document.observe("dom:loaded", function(){

Effect.ScaleBy = Class.create();
Object.extend(Object.extend(Effect.ScaleBy.prototype, Effect.Base.prototype), {
  initialize: function(element, byWidth, byHeight, options) {
    this.element = $(element)
    var options = Object.extend({
	  scaleFromTop: true,
      scaleMode: 'box',        // 'box' or 'contents' or {} with provided values
      scaleByWidth: byWidth,
	  scaleByHeight: byHeight
    }, arguments[3] || {});
    this.start(options);
  },
  setup: function() {
    this.elementPositioning = this.element.getStyle('position');
      
    this.originalTop  = this.element.offsetTop;
    this.originalLeft = this.element.offsetLeft;
	
    this.dims = null;
    if(this.options.scaleMode=='box')
      this.dims = [this.element.offsetHeight, this.element.offsetWidth];
	 if(/^content/.test(this.options.scaleMode))
      this.dims = [this.element.scrollHeight, this.element.scrollWidth];
    if(!this.dims)
      this.dims = [this.options.scaleMode.originalHeight,
                   this.options.scaleMode.originalWidth];
	  
	this.deltaY = this.options.scaleByHeight;
	this.deltaX = this.options.scaleByWidth;
  },
  update: function(position) {
    var currentHeight = this.dims[0] + (this.deltaY * position);
	var currentWidth = this.dims[1] + (this.deltaX * position);
	
	currentHeight = (currentHeight &gt; 0) ? currentHeight : 0;
	currentWidth = (currentWidth &gt; 0) ? currentWidth : 0;
	
    this.setDimensions(currentHeight, currentWidth);
  },

  setDimensions: function(height, width) {
    var d = {};
    d.width = width + 'px';
    d.height = height + 'px';
    
	var topd  = Math.round((height - this.dims[0])/2);
	var leftd = Math.round((width  - this.dims[1])/2);
	if(this.elementPositioning == 'absolute' || this.elementPositioning == 'fixed') {
		if(!this.options.scaleFromTop) d.top = this.originalTop-topd + 'px';
		d.left = this.originalLeft-leftd + 'px';
	} else {
		if(!this.options.scaleFromTop) d.top = -topd + 'px';
		d.left = -leftd + 'px';
	}
    this.element.setStyle(d);
  }
});

});</code>
    </property>
    <property>
      <name>modalbox</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>onDemand=On demand|always=Always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>XWiki.ModalBox</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>ed5018f9-e362-4fd3-8d57-c5b76753147c</guid>
    <property>
      <cache>default</cache>
    </property>
    <property>
      <code>#MB_overlay {
	position: absolute;
	margin: auto;
	top: 0;	left: 0;
	width: 100%; height: 100%;
	z-index: 9999;
	background-color: #000!important;
}
#MB_overlay[id] { position: fixed; }

#MB_window {
	position: absolute;
	top: 0;
	border: 0 solid;
	text-align: left;
	z-index: 10000;
}
#MB_window[id] { position: fixed!important; }

#MB_frame {
	position: relative;
	background-color: #EFEFEF;
	height: 100%;
}

#MB_header {
	margin: 0;
	padding: 0;
}

#MB_content {
	padding: 6px .75em;
	overflow: auto;
}

#MB_caption {
	font: bold 100% "Lucida Grande", Arial, sans-serif;
	text-shadow: #FFF 0 1px 0;
	padding: .5em 2em .5em .75em;
	margin: 0;
	text-align: left;
}

#MB_close {
	display: block;
	position: absolute;
	right: 5px; top: 4px;
	padding: 2px 3px;
	font-weight: bold;
	text-decoration: none;
	font-size: 13px;
}
#MB_close:hover {
	background: transparent;
}

#MB_loading {
	padding: 1.5em;
	text-indent: -10000px;
	background: transparent url($doc.getAttachmentURL('spinner.gif')) 50% 0 no-repeat;
}

/* Color scheme */
#MB_frame {
	padding-bottom: 7px;
	-webkit-border-radius: 7px; 
	-moz-border-radius: 7px;
	border-radius: 7px;
}
#MB_window {
	background-color: #EFEFEF;
	color: #000;
	-webkit-box-shadow: 0 8px 64px #000; 
	-moz-box-shadow: 0 0 64px #000; 
	box-shadow: 0 0 64px #000;
	
	-webkit-border-radius: 7px; 
	-moz-border-radius: 7px;
	border-radius: 7px;
}
#MB_content { border-top: 1px solid #F9F9F9; }
#MB_header {
  background-color: #DDD;
  border-bottom: 1px solid #CCC;
}
#MB_caption { color: #000 }
#MB_close { color: #777 }
#MB_close:hover { color: #000 }


/* Alert message */
.MB_alert {
	margin: 10px 0;
	text-align: center;
}</code>
    </property>
    <property>
      <name>modalbox</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.TagClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <tags>
        <cache>0</cache>
        <displayType>checkbox</displayType>
        <multiSelect>1</multiSelect>
        <name>tags</name>
        <number>1</number>
        <prettyName>Tags</prettyName>
        <relationalStorage>1</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <values/>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </tags>
    </class>
    <name>XWiki.ModalBox</name>
    <number>0</number>
    <className>XWiki.TagClass</className>
    <guid>31adec84-df5a-4078-83ea-73f49c644970</guid>
    <property>
      <tags/>
    </property>
  </object>
  <content>#if($request.page)
$response.sendRedirect($xwiki.getURL($request.page, "view", "xpage=popup"))
#else
#set($ok = $xwiki.jsfx.use("js/scriptaculous/scriptaculous.js"))
#set($ok = $xwiki.jsx.use("XWiki.ModalBox"))
#set($ok = $xwiki.ssx.use("XWiki.ModalBox"))

&lt;a href="$xwiki.getURL('Main.WebHome','view','xpage=plain')" title="Simple form" onclick="
Modalbox.show(this.href, {width:1000, title: 'my title'}); return false; "&gt;Test modal box&lt;/a&gt;

&lt;a href="$xwiki.getURL('Workpackages.WP2','view','xpage=popup')" title="Simple form" onclick="
Modalbox.show(this.href, {width:1000, title: 'my title'}); return false; "&gt;Test workpackage&lt;/a&gt;

&lt;a href="$xwiki.getURL('Workpackages.WP2','view','xpage=plain')" title="Simple form" onclick="
Modalbox.show(this.href, {width:1000, title: 'my title'}); return false; "&gt;Test workpackage xpage=plain&lt;/a&gt;

&lt;a href="$doc.getURL("view", "page=Main.WebHome")" title="Simple form" onclick="
Modalbox.show(this.href, {width:1000, title: 'my title'}); return false; "&gt;Test with redirect&lt;/a&gt;
#end</content>
</xwikidoc>
